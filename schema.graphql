# source: http://127.0.0.1:8000/graphql
# timestamp: Sat Dec 14 2019 17:27:32 GMT+0330 (Iran Standard Time)

input ChangePasswordMutationInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

type ChangePasswordMutationPayload {
  viewer: ViewerNode!
  ok: Boolean!
  clientMutationId: String
}

"""An enumeration."""
enum Evaluation {
  NEEDS_IMPROVMENT
  MEETS_EXPECTATIONS
  EXCEEDS_EXPECTATIONS
  STRONGLY_EXCEEDS_EXPECTATIONS
  SUPERB
}

input LoginMutationInput {
  username: String!
  password: String!
  clientMutationId: String
}

type LoginMutationPayload {
  viewer: ViewerNode!
  user: UserNode
  clientMutationId: String
}

input LogoutMutationInput {
  clientMutationId: String
}

type LogoutMutationPayload {
  viewer: ViewerNode!
  clientMutationId: String
}

type Mutation {
  savePersonReview(input: SavePersonReviewMutationInput!): SavePersonReviewMutationPayload!
  saveProjectReview(input: SaveProjectReviewMutationInput!): SaveProjectReviewMutationPayload!
  login(input: LoginMutationInput!): LoginMutationPayload!
  logout(input: LogoutMutationInput!): LogoutMutationPayload!
  changePassword(input: ChangePasswordMutationInput!): ChangePasswordMutationPayload!
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type PersonReviewNode implements Node {
  reviewee: UserNode!
  sahabinessComment: String
  problemSolvingComment: String
  executionComment: String
  thoughtLeadershipComment: String
  leadershipComment: String
  presenceComment: String
  strengths: [String]
  weaknesses: [String]

  """The ID of the object."""
  id: ID!
  sahabinessRating: Evaluation
  problemSolvingRating: Evaluation
  executionRating: Evaluation
  thoughtLeadershipRating: Evaluation
  leadershipRating: Evaluation
  presenceRating: Evaluation
}

type ProjectNode implements Node {
  name: String!

  """The ID of the object."""
  id: ID!
}

type ProjectReviewNode implements Node {
  project: ProjectNode!
  text: String

  """The ID of the object."""
  id: ID!
  rating: Evaluation
  reviewers: [UserNode!]!
}

type Query {
  viewer: ViewerNode!
}

input SavePersonReviewMutationInput {
  revieweeId: ID!
  sahabinessRating: Evaluation
  sahabinessComment: String
  problemSolvingRating: Evaluation
  problemSolvingComment: String
  executionRating: Evaluation
  executionComment: String
  thoughtLeadershipRating: Evaluation
  thoughtLeadershipComment: String
  leadershipRating: Evaluation
  leadershipComment: String
  presenceRating: Evaluation
  presenceComment: String
  strengths: [String!]
  weaknesses: [String!]
  clientMutationId: String
}

type SavePersonReviewMutationPayload {
  viewer: ViewerNode!
  personReview: PersonReviewNode
  clientMutationId: String
}

input SaveProjectReviewMutationInput {
  projectId: ID!
  text: String
  rating: Evaluation
  reviewersId: [ID!]!
  clientMutationId: String
}

type SaveProjectReviewMutationPayload {
  viewer: ViewerNode!
  projectReview: ProjectReviewNode
  clientMutationId: String
}

type Settings {
  selfAssessment: Boolean!
  peerReviews: Boolean!
  managerReviews: Boolean!
  calibration: Boolean!
  result: Boolean!
}

type UserNode implements Node {
  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!

  """The ID of the object."""
  id: ID!
}

type ViewerNode implements Node {
  """The ID of the object."""
  id: ID!
  users: [UserNode!]!

  """The ID of the object"""
  user(id: ID!): UserNode
  me: UserNode

  """The ID of the object"""
  projectReview(id: ID!): ProjectReviewNode
  projectReviews: [ProjectReviewNode!]!
  settings: Settings!

  """The ID of the object"""
  personReview(id: ID!): PersonReviewNode
  personReviews: [PersonReviewNode!]!
  findPersonReview(revieweeId: ID): PersonReviewNode

  """The ID of the object"""
  project(id: ID!): ProjectNode
  projects: [ProjectNode!]!
  node(id: ID!): Node
}
