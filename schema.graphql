# source: http://127.0.0.1:8000/graphql
# timestamp: Tue Dec 10 2019 14:49:28 GMT+0330 (Iran Standard Time)

input ChangePasswordMutationInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

type ChangePasswordMutationPayload {
  viewer: ViewerNode!
  ok: Boolean!
  clientMutationId: String
}

"""An enumeration."""
enum Evaluation {
  NEEDS_IMPROVMENT
  MEETS_EXPECTATIONS
  EXCEEDS_EXPECTATIONS
  STRONGLY_EXCEEDS_EXPECTATIONS
  SUPERB
}

input LoginMutationInput {
  username: String!
  password: String!
  clientMutationId: String
}

type LoginMutationPayload {
  viewer: ViewerNode!
  user: UserNode
  clientMutationId: String
}

input LogoutMutationInput {
  clientMutationId: String
}

type LogoutMutationPayload {
  viewer: ViewerNode!
  clientMutationId: String
}

type Mutation {
  savePersonReview(input: SavePersonReviewMutationInput!): SavePersonReviewMutationPayload!
  login(input: LoginMutationInput!): LoginMutationPayload!
  logout(input: LogoutMutationInput!): LogoutMutationPayload!
  changePassword(input: ChangePasswordMutationInput!): ChangePasswordMutationPayload!
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PersonReviewNode implements Node {
  reviewee: UserNode!
  sahabinessComment: String
  problemSolvingComment: String
  executionComment: String
  thoughtLeadershipComment: String
  leadershipComment: String
  presenceComment: String
  strengths: [String]
  weaknesses: [String]

  """The ID of the object."""
  id: ID!
  sahabinessRating: Evaluation
  problemSolvingRating: Evaluation
  executionRating: Evaluation
  thoughtLeadershipRating: Evaluation
  leadershipRating: Evaluation
  presenceRating: Evaluation
}

type ProjectNode implements Node {
  name: String!

  """The ID of the object."""
  id: ID!
}

type ProjectNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProjectNodeEdge]!
}

"""A Relay edge containing a `ProjectNode` and its cursor."""
type ProjectNodeEdge {
  """The item at the end of the edge"""
  node: ProjectNode

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  viewer: ViewerNode!
}

input SavePersonReviewMutationInput {
  revieweeId: ID!
  sahabinessRating: Evaluation
  sahabinessComment: String
  problemSolvingRating: Evaluation
  problemSolvingComment: String
  executionRating: Evaluation
  executionComment: String
  thoughtLeadershipRating: Evaluation
  thoughtLeadershipComment: String
  leadershipRating: Evaluation
  leadershipComment: String
  presenceRating: Evaluation
  presenceComment: String
  strengths: [String!]
  weaknesses: [String!]
  clientMutationId: String
}

type SavePersonReviewMutationPayload {
  viewer: ViewerNode!
  personReview: PersonReviewNode
  clientMutationId: String
}

type UserNode implements Node {
  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!

  """The ID of the object."""
  id: ID!
}

type UserNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserNodeEdge]!
}

"""A Relay edge containing a `UserNode` and its cursor."""
type UserNodeEdge {
  """The item at the end of the edge"""
  node: UserNode

  """A cursor for use in pagination"""
  cursor: String!
}

type ViewerNode implements Node {
  """The ID of the object."""
  id: ID!
  users(before: String, after: String, first: Int, last: Int, username: String): UserNodeConnection!

  """The ID of the object"""
  user(id: ID!): UserNode
  me: UserNode
  projects(before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): ProjectNodeConnection!
  node(id: ID!): Node
}
