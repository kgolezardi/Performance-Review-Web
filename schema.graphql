# source: http://127.0.0.1:8000/graphql
# timestamp: Sun Jan 03 2021 17:29:38 GMT+0330 (Iran Standard Time)

input ChangePasswordMutationInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

type ChangePasswordMutationPayload {
  viewer: ViewerNode!
  ok: Boolean!
  clientMutationId: String
}

input DeleteProjectReviewMutationInput {
  projectReviewId: ID!
  clientMutationId: String
}

type DeleteProjectReviewMutationPayload {
  viewer: ViewerNode!
  deletedProjectReviewId: ID
  clientMutationId: String
}

"""An enumeration."""
enum Evaluation {
  NEEDS_IMPROVEMENT
  MEETS_EXPECTATIONS
  EXCEEDS_EXPECTATIONS
  SUPERB
}

input LoginMutationInput {
  username: String!
  password: String!
  clientMutationId: String
}

type LoginMutationPayload {
  viewer: ViewerNode!
  user: UserNode
  clientMutationId: String
}

input LogoutMutationInput {
  clientMutationId: String
}

type LogoutMutationPayload {
  viewer: ViewerNode!
  clientMutationId: String
}

type ManagerPersonReviewNode implements Node {
  reviewee: UserNode!

  """The ID of the object."""
  id: ID!
  sahabinessRating: Evaluation
  problemSolvingRating: Evaluation
  executionRating: Evaluation
  thoughtLeadershipRating: Evaluation
  leadershipRating: Evaluation
  presenceRating: Evaluation
  overallRating: Evaluation
}

type ManagerProjectCommentNode implements Node {
  projectReview: ProjectReviewNode!

  """The ID of the object."""
  id: ID!
  rating: Evaluation
}

type Mutation {
  savePersonReview(input: SavePersonReviewMutationInput!): SavePersonReviewMutationPayload!
  saveProjectReview(input: SaveProjectReviewMutationInput!): SaveProjectReviewMutationPayload!
  deleteProjectReview(input: DeleteProjectReviewMutationInput!): DeleteProjectReviewMutationPayload!
  saveProjectComment(input: SaveProjectCommentMutationInput!): SaveProjectCommentMutationPayload!
  saveManagerPersonReview(input: SaveManagerPersonReviewMutationInput!): SaveManagerPersonReviewMutationPayload!
  saveManagerProjectComment(input: SaveManagerProjectCommentMutationInput!): SaveManagerProjectCommentMutationPayload!
  startReview(input: StartReviewMutationInput!): StartReviewMutationPayload!
  login(input: LoginMutationInput!): LoginMutationPayload!
  logout(input: LogoutMutationInput!): LogoutMutationPayload!
  changePassword(input: ChangePasswordMutationInput!): ChangePasswordMutationPayload!
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type PersonReviewNode implements Node {
  reviewee: UserNode!
  sahabinessComment: String
  problemSolvingComment: String
  executionComment: String
  thoughtLeadershipComment: String
  leadershipComment: String
  presenceComment: String
  strengths: [String!]
  weaknesses: [String!]

  """The ID of the object."""
  id: ID!
  sahabinessRating: Evaluation
  problemSolvingRating: Evaluation
  executionRating: Evaluation
  thoughtLeadershipRating: Evaluation
  leadershipRating: Evaluation
  presenceRating: Evaluation
  state: State!
  reviewer: UserNode
  isSelfReview: Boolean!
}

"""An enumeration."""
enum Phase {
  SELF_REVIEW
  PEER_REVIEW
  MANAGER_REVIEW
  RESULTS
  IDLE
}

type ProjectCommentNode implements Node {
  projectReview: ProjectReviewNode!
  text: String

  """The ID of the object."""
  id: ID!
  reviewer: UserNode
  rating: Evaluation
}

type ProjectNode implements Node {
  name: String!

  """The ID of the object."""
  id: ID!
}

type ProjectReviewNode implements Node {
  project: ProjectNode!
  reviewee: UserNode!
  text: String

  """The ID of the object."""
  id: ID!
  rating: Evaluation
  reviewers: [UserNode!]!

  """
  get or create a project comment about this project review from the logged in user
  """
  comment: ProjectCommentNode
  comments: [ProjectCommentNode!]!

  """
  get or create a manager project comment about this project review from the logged in user
  """
  managerComment: ManagerProjectCommentNode
}

type Query {
  viewer: ViewerNode!
}

type RoundNode implements Node {
  title: String!

  """The ID of the object."""
  id: ID!
  phase: Phase!
  projects: [ProjectNode!]!
  participants: [UserNode!]!
}

input SaveManagerPersonReviewMutationInput {
  revieweeId: ID!
  sahabinessRating: Evaluation
  problemSolvingRating: Evaluation
  executionRating: Evaluation
  thoughtLeadershipRating: Evaluation
  leadershipRating: Evaluation
  presenceRating: Evaluation
  overallRating: Evaluation
  clientMutationId: String
}

type SaveManagerPersonReviewMutationPayload {
  viewer: ViewerNode!
  managerPersonReview: ManagerPersonReviewNode
  clientMutationId: String
}

input SaveManagerProjectCommentMutationInput {
  projectReviewId: ID!
  rating: Evaluation
  clientMutationId: String
}

type SaveManagerProjectCommentMutationPayload {
  viewer: ViewerNode!
  managerProjectComment: ManagerProjectCommentNode
  clientMutationId: String
}

input SavePersonReviewMutationInput {
  revieweeId: ID!
  sahabinessRating: Evaluation
  sahabinessComment: String
  problemSolvingRating: Evaluation
  problemSolvingComment: String
  executionRating: Evaluation
  executionComment: String
  thoughtLeadershipRating: Evaluation
  thoughtLeadershipComment: String
  leadershipRating: Evaluation
  leadershipComment: String
  presenceRating: Evaluation
  presenceComment: String
  strengths: [String!]
  weaknesses: [String!]
  state: State
  clientMutationId: String
}

type SavePersonReviewMutationPayload {
  viewer: ViewerNode!
  personReview: PersonReviewNode
  clientMutationId: String
}

input SaveProjectCommentMutationInput {
  projectReviewId: ID!
  text: String
  rating: Evaluation
  clientMutationId: String
}

type SaveProjectCommentMutationPayload {
  viewer: ViewerNode!
  projectComment: ProjectCommentNode
  clientMutationId: String
}

input SaveProjectReviewMutationInput {
  projectId: ID!
  text: String
  rating: Evaluation
  reviewersId: [ID!]
  clientMutationId: String
}

type SaveProjectReviewMutationPayload {
  viewer: ViewerNode!
  projectReview: ProjectReviewNode
  clientMutationId: String
}

type SettingsNode implements Node {
  idlePageUrl: String
  loginBackgroundImage: String

  """The ID of the object."""
  id: ID!
  phase: Phase!
  startText: String
  managerOverallReviewText: String
}

input StartReviewMutationInput {
  clientMutationId: String
}

type StartReviewMutationPayload {
  viewer: ViewerNode!
  ok: Boolean!
  clientMutationId: String
}

"""An enumeration."""
enum State {
  TODO
  DOING
  DONE
}

type UserNode implements Node {
  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  manager: UserNode
  avatarUrl: String
  isHr: Boolean!

  """The ID of the object."""
  id: ID!
  isManager: Boolean!

  """get or create a person review about this user from logged in user"""
  personReview: PersonReviewNode

  """list of person reviews about this user"""
  personReviews: [PersonReviewNode!]!

  """list of project reviews about this user"""
  projectReviews: [ProjectReviewNode!]!

  """
  get or create a manager person review about this user from logged in user
  """
  managerPersonReview: ManagerPersonReviewNode
  hasStarted: Boolean
  ranking1: String
  ranking2: String
}

type ViewerNode implements Node {
  """The ID of the object."""
  id: ID!
  users: [UserNode!]!

  """The ID of the object"""
  user(id: ID!): UserNode
  me: UserNode

  """The ID of the object"""
  round(id: ID!): RoundNode
  activeRound: RoundNode
  rounds: [RoundNode!]!

  """The ID of the object"""
  managerProjectComment(id: ID!): ManagerProjectCommentNode
  managerProjectComments: [ManagerProjectCommentNode!]!

  """The ID of the object"""
  managerPersonReview(id: ID!): ManagerPersonReviewNode
  managerPersonReviews: [ManagerPersonReviewNode!]!
  findManagerPersonReview(revieweeId: ID): ManagerPersonReviewNode

  """The ID of the object"""
  projectComment(id: ID!): ProjectCommentNode
  projectComments: [ProjectCommentNode!]!

  """The ID of the object"""
  projectReview(id: ID!): ProjectReviewNode
  projectReviews(revieweeId: ID): [ProjectReviewNode!]!
  usersToReview: [UserNode!]!
  settings: SettingsNode!

  """The ID of the object"""
  personReview(id: ID!): PersonReviewNode
  personReviews: [PersonReviewNode!]!
  findPersonReview(revieweeId: ID): PersonReviewNode

  """The ID of the object"""
  project(id: ID!): ProjectNode
  projects: [ProjectNode!]!
  node(id: ID!): Node
}
